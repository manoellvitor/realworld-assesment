name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      # Backend environment variables
      DEBUG: "True"
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALLOWED_HOSTS: "*"
      DATABASE_URL: "sqlite:///db.sqlite3"

      # Frontend environment variables from secrets
      BASE_URL: ${{ secrets.BASE_URL }}
      API_URL: ${{ secrets.API_URL }}
      USER_USERNAME_1: ${{ secrets.USER_USERNAME_1 }}
      USER_EMAIL_1: ${{ secrets.USER_EMAIL_1 }}
      USER_PASSWORD_1: ${{ secrets.USER_PASSWORD_1 }}
      USER_USERNAME_2: ${{ secrets.USER_USERNAME_2 }}
      USER_EMAIL_2: ${{ secrets.USER_EMAIL_2 }}
      USER_PASSWORD_2: ${{ secrets.USER_PASSWORD_2 }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python manage.py test

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend unit tests
        run: |
          cd frontend
          npm run test

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps chromium

      - name: Create .env file for Playwright
        run: |
          cd frontend
          echo "BASE_URL=${{ secrets.BASE_URL }}" > .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env
          echo "USER_USERNAME_1=${{ secrets.USER_USERNAME_1 }}" >> .env
          echo "USER_EMAIL_1=${{ secrets.USER_EMAIL_1 }}" >> .env
          echo "USER_PASSWORD_1=${{ secrets.USER_PASSWORD_1 }}" >> .env
          echo "USER_USERNAME_2=${{ secrets.USER_USERNAME_2 }}" >> .env
          echo "USER_EMAIL_2=${{ secrets.USER_EMAIL_2 }}" >> .env
          echo "USER_PASSWORD_2=${{ secrets.USER_PASSWORD_2 }}" >> .env

      - name: Start backend server
        run: |
          cd backend
          python manage.py runserver 0.0.0.0:8000 &
        env:
          DEBUG: "True"
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALLOWED_HOSTS: "*"
          DATABASE_URL: "sqlite:///db.sqlite3"

      - name: Start frontend server
        run: |
          cd frontend
          npm run start &
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          API_URL: ${{ secrets.API_URL }}

      - name: Wait for servers to start
        run: |
          sleep 10  # Give servers time to start

      - name: Run Playwright tests
        run: |
          cd frontend
          npm run test:e2e
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          API_URL: ${{ secrets.API_URL }}

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    env:
      BASE_URL: ${{ secrets.BASE_URL }}
      API_URL: ${{ secrets.API_URL }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
